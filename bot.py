from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.utils.markdown import text
from aiogram.dispatcher import Dispatcher

from config import TOKEN
import keyboards as kb
import config as mn
import sqlite3


bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

#__________________________________________
@dp.message_handler(commands=['start'])
async def process_start_command(msg: types.Message):
    await bot.send_message(msg.from_user.id,'–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!\n–Ø –±–æ—Ç —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É Roma.\n–ó–∞–≥—è–ª–Ω—å—Ç–µ –≤ –º–µ–Ω—é —â–æ–± –¥—ñ–∑–Ω–∑–Ω–∞—Ç–∏—Å—å–∞—Ç–∏—Å—å –ø—Ä–æ –º–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó', reply_markup=kb.golovna)
    await bot.send_sticker(msg.chat.id, "CAACAgIAAxkBAAEEl5hibF5my-pCI-9yFh216zSvb5hm1AACNQADg_ioGnGqTswaDQTeJAQ")
    try:
        conn = sqlite3.connect('user.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO users VALUES("{msg.from_user.id}", "@{msg.from_user.username}")')
        conn.commit()
    except Exception as e:
        print(e)
        conn = sqlite3.connect('user.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO users VALUES("{msg.from_user.id}")')
        conn.commit()


#___________________________________________
@dp.message_handler(text="–ú–µ–Ω—é üçù")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–í–∏–±–∏—Ä–∞–π—Ç–µ —â–æ –±–∞–∂–∞—î—Ç–µ:", reply_markup=kb.markmenu)

@dp.message_handler(text="–°–Ω—ñ–¥–∞–Ω–æ–∫")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–û—Å—å —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫—É—à—Ç—É–≤–∞—Ç–∏ –Ω–∞ —Å–Ω—ñ–¥–∞–Ω–æ–∫:", reply_markup=kb.marksnidanok)
@dp.message_handler(text="–°–Ω—ñ–¥–∞–Ω–æ–∫ –Ü—Ç–∞–ª—ñ–π—Å—å–∫–∏–π")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, mn.sit , reply_markup=kb.marksnidanok)

@dp.message_handler(text="–°–Ω—ñ–¥–∞–Ω–æ–∫ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∏–π")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, mn.suk , reply_markup=kb.marksnidanok)

@dp.message_handler(text="–°–Ω—ñ–¥–∞–Ω–æ–∫ –§—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, mn.sf , reply_markup=kb.marksnidanok)
@dp.message_handler(text="–û–±—ñ–¥")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–û—Å—å —â–æ –≤–∏ –º–æ–∂–µ—Ç–µ —Å–∫—É—à—Ç—É–≤–∞—Ç–∏ –Ω–∞ –æ–±—ñ–¥:", reply_markup=kb.markobid)

@dp.message_handler(text="–û–±—ñ–¥ –Ü—Ç–∞–ª—ñ–π—Å—å–∫–∏–π")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, mn.oit , reply_markup=kb.markobid)

@dp.message_handler(text="–û–±—ñ–¥ –ê–Ω–≥–ª—ñ–π—Å—å–∫–∏–π")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, mn.ouk , reply_markup=kb.markobid)

@dp.message_handler(text="–û–±—ñ–¥ —Ñ—Ä–∞–Ω—Ü—É–∑—å–∫–∏–π")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, mn.of , reply_markup=kb.markobid)

@dp.message_handler(text="–ù–∞–ø–æ—ó")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–ú–µ–Ω—é –Ω–∞—à–∏—Ö –Ω–∞–ø–æ—ó–≤:", reply_markup=kb.markdrink)
#_____________________________________________

@dp.message_handler(text="–í—ñ–ª—å–Ω—ñ —Å—Ç–æ–ª–∏–∫–∏ ü™ë")
async def memu_rest(msg: types.Message):
    conn = sqlite3.connect('menu.db')
    cur = conn.cursor()
    cur.execute(f'SELECT nomber FROM tables WHERE Employment = "free"')
    result = cur.fetchall()
    print(result)
    await bot.send_message(msg.from_user.id, f'–í—ñ–ª—å–Ω—ñ —Å—Ç–æ–ª–∏–∫–∏:\n{(result)}', reply_markup=kb.glmn)
#_______________________________________________


#_______________________________________________
@dp.message_handler(text="–ó–∞–º–æ–≤–∏—Ç–∏ —Å—Ç–æ–ª–∏–∫!üõé")
async def stol_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id,"–û–±–µ—Ä—ñ—Ç—å –°—Ç–æ–ª–∏–∫:", reply_markup=kb.markstil)

#_______C—Ç—ñ–ª_1___________
@dp.message_handler(text="–°—Ç–æ–ª–∏–∫ 1")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db') #INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'UPDATE tables  SET reservation = "{msg.from_user.id}" WHERE nomber = "1"')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–°—Ç–æ–ª–∏–∫ –Ω–æ–º–µ—Ä 1:\n–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ!", reply_markup=kb.markstil)
    except Exception as e:
        print(e)
        conn = sqlite3.connect('menu.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO tables (reservation) VALUES("{msg.from_user.id}")')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)


#___________________________
@dp.message_handler(text="–°—Ç–æ–ª–∏–∫ 2")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db') #INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'UPDATE tables  SET reservation = "{msg.from_user.id}" WHERE nomber = "2"')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–°—Ç–æ–ª–∏–∫ –Ω–æ–º–µ—Ä 2:\n–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ!", reply_markup=kb.markstil)
    except Exception as e:
        print(e)
        conn = sqlite3.connect('menu.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO tables (reservation) VALUES("{msg.from_user.id}")')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)

@dp.message_handler(text="–°—Ç–æ–ª–∏–∫ 3")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db') #INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'UPDATE tables  SET reservation = "{msg.from_user.id}" WHERE nomber = "3"')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–°–°—Ç–æ–ª–∏–∫ –Ω–æ–º–µ 3:\n–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ!", reply_markup=kb.markstil)
    except Exception as e:
        print(e)
        conn = sqlite3.connect('menu.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO tables (reservation) VALUES("{msg.from_user.id}")')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)

@dp.message_handler(text="–°—Ç–æ–ª–∏–∫ 4")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db')  # INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'UPDATE tables  SET reservation = "{msg.from_user.id}" WHERE nomber = "4"')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–°—Ç–æ–ª–∏–∫ –Ω–æ–º–µ 4:\n–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ!", reply_markup=kb.markstil)
    except Exception as e:
        print(e)
        conn = sqlite3.connect('menu.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO tables (reservation) VALUES("{msg.from_user.id}")')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)

@dp.message_handler(text="–°—Ç–æ–ª–∏–∫ 5")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db') #INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'UPDATE tables  SET reservation = "{msg.from_user.id}" WHERE nomber = "5"')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–°—Ç–æ–ª–∏–∫ –Ω–æ–º–µ 5:\n–ó–∞—Ä–µ–∑–µ—Ä–≤–æ–≤–∞–Ω–æ!", reply_markup=kb.markstil)
    except Exception as e:
        print(e)
        conn = sqlite3.connect('menu.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO tables (reservation) VALUES("{msg.from_user.id}")')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)



#____________________________________________
@dp.message_handler(text="–ú–æ—ó —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó üóù")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db')  # INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'SELECT name FROM tables WHERE reservation = "{msg.from_user.id}" ')
        resultres = cur.fetchall()
        print(resultres)
        await bot.send_message(msg.from_user.id, f'–í–∞—à —Å—Ç–æ–ª–∏–∫ –ø—ñ–¥ –Ω–æ–º–µ—Ä–æ–º:\n{(resultres)}', reply_markup=kb.resdel)
    except Exception as e:
        print(e)
        conn = sqlite3.connect('menu.db')
        cur = conn.cursor()
        cur.execute(f'INSERT INTO tables (reservation) VALUES("{msg.from_user.id}")')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)
#________________________


@dp.message_handler(text="–í–∏–¥–∞–ª–∏—Ç–∏ –º–æ—ó —Ä–µ–∑–µ—Ä–≤–∞—Ü—ñ—ó")
async def memu_rest(msg: types.Message):
    try:
        conn = sqlite3.connect('menu.db')  # INSERT INTO tables(reservation)
        cur = conn.cursor()
        cur.execute(f'UPDATE tables  SET reservation = null WHERE reservation = "{msg.from_user.id}"')
        conn.commit()
        await bot.send_message(msg.from_user.id, "–†–µ–∑–µ—Ä–≤–∞—Ü—ñ—è –≤—ñ–¥–º—ñ–Ω–µ–Ω–∞!", reply_markup=kb.glmn)
    except Exception as e:
        print(e)
        await bot.send_message(msg.from_user.id, "–Ø–∫–∞—Å—å –ø–æ–º–∏–ª–∫–∞!\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑", reply_markup=kb.glmn)

#_________________________________________________
@dp.message_handler(text="–î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id,"–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", reply_markup=kb.golovna)

@dp.message_handler(text="–ù–∞–∑–∞–¥ –¥–æ –º–µ–Ω—é")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id,"–í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—å –¥–æ –º–µ–Ω—é", reply_markup=kb.markmenu)

#___________________________________________
@dp.message_handler(text="–ü—Ä–æ –±–æ—Ç–∞ ‚öôÔ∏è")
async def memu_rest(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–ú–µ–Ω—é —Ä–µ—Å—Ç–æ—Ä–∞–Ω—É –±–æ—Ç:\n–°–≤—Ç–æ—Ä–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—î–∫—Ç—É –∫—É—Ä—Å–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏\n–°—Ç—É–¥–µ–Ω—Ç–∞: –ö–æ–∑—ñ—è –†–æ–º–∞–Ω–∞", reply_markup=kb.golovna)

if __name__ == '__main__':
    executor.start_polling(dp)